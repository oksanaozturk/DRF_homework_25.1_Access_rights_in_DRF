# Задаем версию
version: "3"

# Описываем сервисы, которые будут запускаться
services:
  # Название сервиса.
  redis:
    # Образ, на основании которого будет запускаться контейнер
    image: redis:latest
    # Настройка, которая перезагружает работу redis при его падения
    restart: on-failure
    expose:
      - "6379"

  # Название сервиса. В данном случае описываем КОНТЕЙНЕР С postgres
  db:
    # Образ, на основании которого будет запускаться контейнер
    image: postgres:15-alpine  # У меня установлена версия 15. (У ЛЕши в уроке 16-alpine)
    # Настройка, которая перезагружает работу postgres после падения
    restart: on-failure
    env_file:
      - .env
    # Закрываем порт от внешнего доступа. В сети контейнеры будут иметь доступ
    expose:
      - "5432"
    # Данная настройка необходима, чтобы наши изменения сохранялись в postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
    # Это проверка на то, что postgres у нас работает и с ним всё хорошо
    # Через знак $ у нас идет обращение к значению переменной POSTGRES_USER, скрытому в файле .env
    healthcheck:
      test: ["CMD-SHELL", "-c", "pg_isready -U $POSTGRES_USER"]
      # С какой периодичностью идет запрос на проверку работы postgres
      interval: 10s
      # Количество попыток
      retries: 5
      # Если в течение 5 сек не отвечает, то повторный запрос
      timeout: 5s

  # Название сервиса. В данном случае описываем КОНТЕЙНЕР С Приложением
  app:
    # В данном случае контейнер будет содираться на основе Dockerfile  в нашем проекте
    build: .
    # Настройка для интерактивного режима
    tty: true
    ports:
      - "8000:8000"
    # Добавляем команду для запуска. Она была перенесена из файла Dockerfile
    command: sh -c "python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"
    # Описываем наши зависимости. Контейнер postgres должен быть готовым к работе раньша
    depends_on:
      db:
        condition: service_healthy
    # Данная настройка необходима, чтобы наши изменения сохранялись в app
    volumes:
      - .:/app
    env_file:
      - .env

  # Название сервиса.
  celery:
    build: .
    tty: true
    command: celery -A config worker -l INFO
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - app
    env_file:
      - .env

  celery-beat:
    build: .
    tty: true
    command: celery -A config beat -l INFO
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - app
    env_file:
      - .env


# Данная настройка необходима, чтобы наши изменения сохранялись в postgres
volumes:
  pg_data:

