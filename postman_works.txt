Для работы в Postman идем на сайт https://www.postman.com/, регистрируемся там. Устанавливаем дополнительные библиотеки,
если требует.

GET - Получение запроса на ответ (вывод списка, одного объекта)
POST - здесь уже мы вводим и отправляем данные (регистрация, получение токена, создание нового объекта)
PUT - редактирование объекта (внесение изменений в данные)
PATCH - частичное редактирование объекта
DELETE - удаление объекта

Основной url берем из проекта http://127.0.0.1:8000/
К нему будут расширения, которые будут зависить от задачи.

==========================================================
1) ДЛЯ РЕГИСТРАЦИИ НОВОГО User:

POST   http://127.0.0.1:8000/users/user-create/         (путь собираем из config/urls.py -
там путь до Приложения users обозначено как -users/ + users/urls.py - здесь url создания нового объекта - user-create/)
Также заполняем  раздел Body, выбрав там позицию raw и заполняем данные для регистрации

{
    "email": "skypro.mytest@yandex.ru",
    "password": "123qwe"
}

Если новый User удачно зарегистрировался, то программа даст нам об этом знать выведя его данные регистрации или будет ошибка

================================================================
2) После регистрации необходимо залогиниться в системе,
то есть получить 'refresh'(нужен для обновления 'access')  and 'access'(короткого действия) tokens

POST   http://127.0.0.1:8000/users/login/

Также заполняем  раздел Body, выбрав там позицию raw и заполняем данные уже регистрированного User

{
    "email": "skypro.mytest@yandex.ru",
    "password": "123qwe"
}

Если всё в порядке, то система создаст токены, которые можно будет использовать для аудентификации

=====================================================================
3) Осуществление запросов от User, прошедшего аудентификацию (получившего токены)

НАПРИМЕР: Выведение списка ВСЕХ КУРСОВ:

GET   http://127.0.0.1:8000/materials/course/
(путь собираем из config/urls.py - путь до Приложения materials обозначено как - materials/
+ materials/urls.py - url для выведения списка объектов - course/ , так как создание было с помощью метода ViewSet)

* обязательно заполняем в Headers поле Authorization (как дополнительный ключ-key).
Пишем в значении слово Bearer и номер access token
ИЛИ
* В выбираем сразу раздел Authorization (находится справа от Headers).
В Auth Type выбираем Bearer Token и вставляем значение токена в поле

PS: Периодически потребуется обновлять информацию о токене, так как она будет устаревать

========================================================================
4) ПРИМЕР СОЗДАНИЯ НОВОГО КУРСА

POST   http://127.0.0.1:8000/materials/course/

(путь собираем из config/urls.py - путь до Приложения materials обозначено как - materials/
+ materials/urls.py - url для создания нового объекта - course/ , так как создание было с помощью метода ViewSet)

Также обязательно прописываем данные о токене, как в примере выше

=========================================================================
4_1) ПРИМЕР ВЫВЕДЕНИЯ ОДНОГО КУРСА (Retrieve), обязательно указываем id курса

GET   http://127.0.0.1:8000/materials/course/2/
GET   http://127.0.0.1:8000/materials/course/3/

Также обязательно прописываем данные о токене, как в примере (3) выше

=========================================================================
5) ПРИМЕР РЕДАКТИРОВАНИЯ КУРСА

PUT   http://127.0.0.1:8000/materials/course/2/
PATCH   http://127.0.0.1:8000/materials/course/3/

(путь собираем из config/urls.py - путь до Приложения materials обозначено как - materials/
+ materials/urls.py - url для редактирования объекта - course/ , так как создание было с помощью метода ViewSet)
+ в конце запроса обязательно указывается номер id объекта, который будет редактироваться

Также обязательно прописываем данные о токене, как в примере (3) выше

==========================================================================
6) ПРИМЕР УДАЛЕНИЯ КУРСА

DELETE   http://127.0.0.1:8000/materials/course/2/

(путь собираем из config/urls.py - путь до Приложения materials обозначено как - materials/
+ materials/urls.py - url для удаления объекта - course/ , так как создание было с помощью метода ViewSet)
+ в конце запроса обязательно указывается номер id объекта, который будет удаляться

Также обязательно прописываем данные о токене, как в примере (3) выше

==========================================================================
7) ПРИМЕР СОЗДАНИЯ НОВОГО УРОКА

POST   http://127.0.0.1:8000/materials/lessons/create/

(путь собираем из config/urls.py - путь до Приложения materials обозначено как - materials/
+ materials/urls.py - url для создания нового урока - lessons/create/ , так как создание было с помощью дженериков)

Также обязательно прописываем данные о токене, как в примере (3) выше

===========================================================================
8) ПРИМЕР РЕДАКТИРОВАНИЯ УРОКА/ВЫВОД ОДНОГО УРОКА ДЛЯ ПРОСМОТРА

PUT   http://127.0.0.1:8000/materials/lessons/2/update/
PATCH   http://127.0.0.1:8000/materials/lessons/3/update/

GET   http://127.0.0.1:8000/materials/lessons/2/
GET   http://127.0.0.1:8000/materials/lessons/3/

(путь собираем из config/urls.py - путь до Приложения materials обозначено как - materials/
+ materials/urls.py - url для редактировани/просмотра одного урока - lessons/<int:pk>/update/ и lessons/<int:pk>/ ,
так как создание контроллера было с помощью дженериков)
* При желании можно подгрузить файлы в разделе Body/ form-data

Также обязательно прописываем данные о токене, как в примере (3) выше

===========================================================================
9) ПРИМЕР УДАЛЕНИЯ УРОКА

DELETE   http://127.0.0.1:8000/materials/lessons/2/destroy/

(путь собираем из config/urls.py - путь до Приложения materials обозначено как - materials/
+ materials/urls.py - url для удаления урока - lessons/<int:pk>/destroy/ , так как создание было с помощью дженериков)

Также обязательно прописываем данные о токене, как в примере (3) выше

===========================================================================
10) ПРИМЕР ДОБАВЛЕНИЯ ССЫЛКИ НА ВИДЕО К УРОКУ И ОДНОВРЕМЕННО ПРОВЕРКА ВАЛИДАЦИИ ССЫЛКИ, КОТОРУЮ МЫ УКАЗЫВАЕМ

ВАЛИДАЦИЯ — процесс проверки вводимых пользователем данных на корректность и соблюдение правил безопасности.

PATCH  http://127.0.0.1:8000/materials/lessons/1/update/

Также заполняем  раздел Body, выбрав там позицию raw и пишем значение для поля 'video'

{
    "video": "https://greenwayglobal.com/shop/brands/welllab-liquid/00333"
}

РЕЗУЛЬТАТ: Выдаст ошибку

{
    "non_field_errors": [
        "Ссылка возможна только на сайт youtube.com. Введите правильный URL."
    ]
}

ДРУГОЙ ВАРИАНТ ССЫЛКИ:

{
    "video": "https://www.youtube.com/watch?v=vYs-QBqLfkw"
}

РЕЗУЛЬТАТ: Сохранение ссылки

{
    "id": 1,
    "name": "Математика",
    "preview": null,
    "description": "Математика для подготовки в школу",
    "video": "https://www.youtube.com/watch?v=vYs-QBqLfkw",
    "course": 1,
    "owner": null
}

===========================================================
10) ПРОВЕРКА НАСТРОЙКИ ПАГИНАЦИИ

ПАГИНАЦИЯ — процесс разделения большого набора данных на отдельные страницы для удобного отображения и навигации по ним.

* При запросе вывода списка уроков или курсов в ответе сначала будут показаны следующие данные

    "count": 10, # Информация об общем количестве сущностей
    "next": "http://127.0.0.1:8000/materials/lessons/?page=2", # ССылка на следующую страницу, если она есть или null
    "previous": null, # Ссылка на предыдущую страницу, если она есть или null (если нет)
    "results": [

* Для задания Пользователем своего значения вывода сущностей на страницу:
Заходим в Params, далее добавляем page_size (key) и его значение (value)

* Для перехода на следующую или предыдущую страницы нажимаем на ссылки или вводим в Params поле page и номер страницы

=============================================================
11) ПРОВЕРКА РАБОТЫ КОНТРОЛЛЕРА SubscriptionCourseAPIView, а именно его метода POST,
который добавляет или убирает подписку Пользователю

* Для начала Выбираем Пользователя и получаем для него ТОКЕНЫ

ЗАПРОС: POST   http://127.0.0.1:8000/users/login/
+ заполняем  раздел Body, выбрав там позицию raw и заполняем данные уже регистрированного User

{
    "email": "skypro.mytest@yandex.ru",
    "password": "123qwe"
}

* ДАЛЕЕ формируем новый запрос (для этого можно открыть новую вкладку)

POST http://127.0.0.1:8000/materials/subscription/

+ заполняем  раздел Body, выбрав там позицию raw и заполняем данные по course (id курса)
{
    "course": "1"
}

РЕЗУЛЬТАТ:
{
    "message": "подписка добавлена"
}

ИЛИ

{
    "message": "подписка удалена"
}

* ПОСЛЕ ЭТОГО можно проверить изменение значения поля is_subscription у модели Course (по дпнному id),
сделав запрос на выведение данного курса

GET  http://127.0.0.1:8000/materials/course/1/

В поле is_subscription увидим изменения с False на True или наоборот

==================================================================