25.2 Валидаторы, пагинация и тесты

ЗАДАНИЕ 1
Для сохранения уроков и курсов реализуйте дополнительную проверку на отсутствие в материалах ссылок на сторонние ресурсы, кроме youtube.com.

То есть ссылки на видео можно прикреплять в материалы, а ссылки на сторонние образовательные платформы или личные сайты — нельзя.

Создайте отдельный файл
validators.py, реализуйте валидатор, проверяющий ссылку, которую пользователь хочет записать в поле урока с помощью класса или функции.

Интегрируйте валидатор в сериализатор.

Если вы используете функцию-валидатор — указанием валидаторов для поля сериализатора
validators=[ваш_валидатор].

Если вы используете класс-валидатор — указанием валидаторов в
class Meta:
validators = [ваш_валидатор(field='поле_которое_валидируем')].

ПОДСКАЗКА:
Воспользуйтесь
APIView и реализуйте логику метода post, который будет отдавать ответ в зависимости от действия.

ПРИМЕР кода метода post для управления подпиской:

def post(self, *args, **kwargs):
    user = получаем пользователя из self.requests
    course_id = получаем id курса из self.reqests.data
    course_item = получаем объект курса из базы с помощью get_object_or_404

    subs_item = получаем объекты подписок по текущему пользователю и курса

		# Если подписка у пользователя на этот курс есть - удаляем ее
    if subs_item.exists():
        ...
        message = 'подписка удалена'
		# Если подписки у пользователя на этот курс нет - создаем ее
    else:
        ...
        message = 'подписка добавлена'
		# Возвращаем ответ в API
    return Response({"message": message})

Зарегистрируйте новый контроллер в
url
 и проверьте его работоспособность в Postman.


ПОСЛЕДОВАТЕЛЬНОСТЬ ДЕЙСТВИЙ В ДЗ_25.2:

1) Создание файла validations.py в Приложении materials + добавление класса ValidateURLResource для проверки url видео
2) Добавление созданного класса-валидатора в serializer.py в класс LessonSerializer
   validators = [ValidateURLResource(field='video')]
3) Откорректировано поле video в модели Lesson

=========================================================================
ЗАДАНИЕ 2

Добавьте модель подписки на обновления курса для пользователя.

Модель подписки должна содержать следующие поля:
«пользователь» (FK на модель пользователя),
 «курс» (FK на модель курса).
 Можете дополнительно расширить модель при необходимости.

Вам необходимо реализовать эндпоинт для установки подписки пользователя и на удаление подписки у пользователя.

ПОСЛЕДОВАТЕЛЬНОСТЬ ДЕЙСТВИЙ:
1) Создали модель SubscriptionCourse в materials/ models.py + выполнили миграции
python manage.py makemigrations
python manage.py migrate

2) Создали контроллер SubscriptionCourseAPIView для установки подписки пользователя и на удаление подписки у пользователя
3) В materials/ urls.py задали путь

==========================================================================
ЗАДАНИЕ 3

Пагинация — процесс разделения большого набора данных на отдельные страницы для удобного отображения и навигации по ним.


Реализуйте пагинацию для вывода всех уроков и курсов.

Пагинацию реализуйте в отдельном файле paginators.py.
Можно реализовать один или несколько классов пагинатора.
Укажите параметры
page_size (Количество сущностей, которое будет выведено на 1 странице),
page_size_query_param (Для самостоятельного выбора Пользователем количества сущностей на страницу)
max_page_size (Максимально возможное количество сущностей на страницу) для класса PageNumberPagination.
Количество элементов на странице выберите самостоятельно.
Интегрируйте пагинатор в контроллеры, используя параметр pagination_class.

ПОСЛЕДОВАТЕЛЬНОСТЬ ДЕЙСТВИЙ:

Документация: https://www.django-rest-framework.org/ в разделе APIGiude / Pagination

Можно настроить на уровне проекта
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100
}
НО МЫ будем создавать кастомную команду
1) Создаем файл paginators.py в materials.py, где добавляем class CustomPagination. Задаем необходимые нам параметры

Пример класса можно скрпировать из документации раздела Modifying the pagination style
class LargeResultsSetPagination(PageNumberPagination):
    page_size = 1000
    page_size_query_param = 'page_size'
    max_page_size = 10000

2) Подключаем пагинатор в materials/viwes.py в контроллеры вывода уроков class LessonListAPIView и курсов class CourseViewSet
pagination_class = CustomPagination

=========================================================================
ЗАДАНИЕ 4
Напишите тесты, которые будут проверять корректность работы CRUD уроков и функционал работы подписки на обновления курса.

В тестах используйте метод setUp для заполнения базы данных тестовыми данными.
Обработайте возможные варианты взаимодействия с контроллерами пользователей с разными правами доступа.
Для аутентификации пользователей используйте
self.client.force_authenticate().
Документацию к этому методу можно найти: https://www.django-rest-framework.org/api-guide/testing/#forcing-authentication

Сохраните результат проверки покрытия тестами.

ПОСЛЕДОВАТЕЛЬНОСТЬ ДЕЙСТВИЙ:
1) Создание класса CourseTestCase(APITestCase) в materials/ tests.py
2) Добавление метода setUp в класс для создания тестовых данных, с которыми будет проводиться работа
3) Запуск теста: python manage.py test

