ТЕМА 27.1 Основы Docker
УСТАНОВКА DOCKER

Windows и macOS
1) Загрузите и установите Docker Desktop, который включает графический интерфейс и инструменты для работы с Docker.
2) Запустите установленное приложение Docker Desktop и подождите завершения инициализации.

После установки Docker проверьте его версию и правильность работы с помощью команды
docker --version

Запустить тестовый контейнер
docker run hello-world

Официальный сайт: www.docker.com

Документация: https://docs.docker.com/engine/install/.
-----------------------------------------------------------

Составляющие меню:

Containers - контейнеры, которые ранее здесь запускались (историю можно очищать).

Images - Образы, которые мы скачивали или создавали самостоятельно.

-------------------------------------------------------------

КОМАНДЫ в Docker

Основные команды Docker:

* docker version — отображает информацию о версии Docker клиента и сервера.

* docker info — выводит общую информацию о Docker, такую как количество контейнеров, образов, сетей и т. д.

* docker pull <image_name> — загружает Docker-образ с Docker Hub или из другого репозитория.
Например,
      * docker pull ubuntu - загрузит последний образ Ubuntu.

* docker images — показывает список всех доступных образов, которые есть у вас в системе.

* docker ps — отображает список активных (запущенных) контейнеров.

* docker ps-a Используйте опцию a - для отображения всех контейнеров, включая остановленные.

* docker run <image_name> — создает и запускает контейнер из указанного образа.
Например,
     * docker run ubuntu - запустит новый контейнер на базе образа Ubuntu.

ВАЖНО!!! Отличие run и pull:
         Команда run уже содержит внутри себя команду pull (т.е. она и скачивает, и запускает)

* * docker run-it busybox - Создает и запускает контейнер, а также запускает терминал (busybox - это программа типа hello-world)

------------------------------------------------------------------------------

Рассмотрим некоторые из основных команд для работы с контейнерами в Docker:

docker start <container_id>
 — запускает остановленный контейнер. Можно также использовать название контейнера вместо его ID.

docker stop <container_id>
 — останавливает работающий контейнер. Можно также использовать название контейнера вместо его ID.

docker restart <container_id>
 — перезапускает контейнер.

docker rm <container_id>
 — удаляет остановленный контейнер. Можно также использовать название контейнера вместо его ID.
Если вызвать данную команду для неостановленного контейнера, он будет остановлен и после удален.

docker rmi <image_name>
 — удаляет образ из вашей системы. Обратите внимание, что образ не должен использоваться контейнерами.

docker exec -it <container_id> <command>
 — выполняет команду внутри запущенного контейнера. Опция it обеспечивает интерактивный режим с терминалом.

docker container prune
 — удаляет все остановленные контейнеры.

ВАЖНО:
Для получения более подробной информации о командах и опциях Docker вы можете использовать команду
docker --help
 или обращаться к документации Docker.
 --------------------------------------------------------------------------

КОМАНДЫ для работы внутри контейнера и с его информацией:

docker container inspect 12er3253
 — посмотреть информацию по контейнеру.

docker exec -it 24er2342 bash
 — запустить процесс в контейнере с id=24er2342.

docker run -d --name my_nginx nginx — задать имя my_nginx создаваемому контейнеру.
(Для того чтобы запустить контейнер в фоновом режиме, используется дополнительный флаг -d.)

docker run -p 8080:80 nginx — сделать маппинг портов: -p внешний_порт:внутренний_порт.

Маппинг портов — процесс связывания внешних портов хостовой машины и портов внутри контейнера.

--------------------------------------------------------------

Процесс работы с контейнерами в Docker обычно включает следующие шаги:

1) Создание Docker-образа. Определяется Dockerfile, который содержит инструкции для создания образа.
Образ содержит всё необходимое для запуска приложения, включая код, зависимости, настройки и т. д.

2) Запуск контейнера. На основе Docker-образа создается и запускается контейнер. Это делается с помощью команды
docker run.
Для того чтобы запустить контейнер в фоновом режиме, используется дополнительный флаг -d.

3) Работа с контейнером. Контейнер работает в изолированной среде, и вы можете взаимодействовать с ним,
выполнять команды, настраивать его и т. д.

4) Остановка и удаление контейнера. По завершении работы с контейнером вы можете его остановить с помощью команды
docker stop, а затем удалить командой docker rm.

-------------------------------------------------------------------

Dockerfile — это текстовый файл, который содержит инструкции для построения Docker-образа.
Он может быть использован для запуска контейнеров.

Инструкции включают:

* идентификацию существующего образа, используемого в качестве основы;
* команды, выполняемые в процессе создания образа;
* команду, которая будет выполняться при развертывании новых экземпляров этого образа контейнера.

-------------------------------------------------------------------

Рассмотрим ПРИМЕР простого Dockerfile для Python-приложения:

# Используем базовый образ Python
FROM python:3.11

# Устанавливаем рабочую директорию в контейнере
WORKDIR /app

# Копируем зависимости в контейнер
COPY requirements.txt .

# Устанавливаем зависимости
RUN pip install --no-cache-dir -r requirements.txt

# Копируем код приложения в контейнер
COPY . .

# Команда для запуска приложения при старте контейнера
CMD ["python", "app.py"]

Чтобы собрать Docker-образ, сохраним данный Dockerfile в директории с вашим проектом и выполним команду в терминале:

- docker build -t my-python-app .

Здесь -t my-python-app задает имя образа, а . указывает на текущую директорию с Dockerfile.

После успешной сборки образа вы можете запустить контейнер с помощью команды:

- docker run my-python-app

Таким образом вы запустите ваше Python-приложение в контейнере.

=======================================================================

РАЗБОР ПО ВИДЕО С ЛЕШЕЙ!

ЗАДАНИЕ 1
Запустить командой докер контейнер с БД PostgreSQL. Открыть порт 5432 из контейнера.
Прописать конфигурацию переменных окружения.

------------------------------------------------------------------
РЕАЛИЗАЦИЯ:

Будет использовать терминар нашего компа (Командную строку)

1) Срузу будем создавать сеть, так как потребуется подключение БД к PostgreSQL (для работы Django)

- docker network create materials
Ответ: создается сеть с длинным номером
1e849b698f15f306f6508c579a07cc8029830a17bd358ced2fa8fc8d2bd663d0

# Далее запускаем контейнер PostgreSQL в этой сети.
!!! ОБЯЗАТЕЛЬНО задаем в начале флаг -d
Задаем имя (name) и порт (-p), который мы будем открывать (контейнер будет открыт для доступа из вне),
переменные окружения (-е) POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD
+ !!! УКЗЫВАЕМ ОБРАЗ КОНТЕЙНЕРА, который мы хотим использовать (в нашем случае postgres) и его последнюю версию latest

 docker run -d --network=materials --name=postgrs_container -p 5432:5432 -e POSTGRES_DB=online_school -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=133124Ds postgres:latest
 (ЭТО ВСЁ ОДНА КОМАНДА НА 2 СТРОКИ!!!)

 ОТВЕТ: Создание контейнера, выведется длинный номер

 * Проверяем работоспособность КОМАНДОЙ: docker ps

 ОТВЕТ:
 CONTAINER ID   IMAGE             COMMAND                  CREATED         STATUS         PORTS                    NAMES
5c70946ae182   postgres:latest   "docker-entrypoint.s…"   3 minutes ago   Up 3 minutes   0.0.0.0:5432->5432/tcp   postgrs_container

* Можем посмотреть ЛОГИ КОНТЕЙНЕРА: docker logs 5c70946ae182 (пишем container_id)

В ПРИЛОЖЕНИИ DockerDesktop в Информации по данному контейнеру, в разделе Inspect можно увидеть всё заданные нами настройки

=========================================================================================

ЗАДАНИЕ 2
Упаковать Django приложение в докер м подключить к БД

------------------------------------------------------------------
РЕАЛИЗАЦИЯ:
1) Открываем наш проект Django и в корневой директории создаем DockerFile

(Перед этим настраиваем Docker in Pycharm. Программа сама предложит инсталировать.
Далее уже можно будет создать DockerFile в корневой директории. Будем выбирать из нового появившегося раздела DockerFiles)

2)  В новом файле DockerFile создаем список образов.
Список всех образов можно посмотреть на docker hub (набираем в поиске) https://hub.docker.com/

Заходим на этот сайт и в его ПОИСКОВИКЕ набираем python

3) Далее заполняем DockerFile
# slim обозначает, что мы запрашиваем более легковесную версию без дополнительных утилит (здесь её хватит)
FROM python:3.12-slim

# Наполняем рабочую директорию. Путь не прописываем, так как обафайла лежат рядом, в корневой директории
COPY /requirements.txt /

# Устанавливаем все зависимости
# --no-cash-dir эту информацию добаваляем, чтобы у нас не кэшировался список зависимостей, а всегда обновлялся актуальный
RUN pip install --no-cache-dir -r /requirements.txt

# Копируем наше приложение (то есть всю информацию из текущей директории в рабочую)
COPY . .

# Команда для запуска приложения при старте контейнера для постановки знака комбинация клавиш (Alt+38)
# sh - настройка работы с оболочками
# && нужны для применения миграций

CMD ["sh", "-c", "python manage.py migrate && python manage.py runserver"]

ЛЕША в конце урока поправил вот так
CMD ["sh", "-c", "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]
И в ALLOWED_HOSTS = ["*"] добавил звездочку, чтобы были доступны все хосты

4) Собираем образ Приложение через команду: docker build . -t materials_app

. - точка означает путь до директории DockerFile (лежит в корневой директории)
-t - означает создание тегов с именем materials_app

В Командной строке Pycham вводим: docker build . -t materials_app

!!! В ПРИЛОЖЕНИИ DockerDesktop в разделе Images видим, что у нас создался новый Образ с именем materials_app и номером id

ТАКЖЕ можно посмотреть через командную строку в Pychrm: docker image ls

5) ЗАПУСКАЕМ НАШ ОБРАЗ (Image) В командную строку вводим команду:
-p  это порт
-d означает, что после запуска консоль будет свободной
docker run -it --network=materials -p 8000:8000 -d materials-app

===================================================================


